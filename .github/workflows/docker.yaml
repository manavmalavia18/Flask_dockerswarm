name: Docker CI/CD Pipeline

# Trigger workflow on push to main branch
on:
  [pull_request] # You can change this to any branch you want

# Define jobs
jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu image as the runner

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx (required for building multi-platform images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub using secrets stored in GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username from GitHub secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password from GitHub secrets

      # Step 4: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask:latest .
        
      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/flask:latest

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation
      
      - name: Build and run Docker Compose
        run: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          docker-compose -f docker-compose.yaml up -d --build  
      
      - name: Wait for Flask app to start
        run: |
          sleep 10  # Give the Flask app time to start
      
      - name: View container logs
        run: |
          # Use the static container name defined in docker-compose.yml
          echo "Fetching logs for container flask_app..."
          docker logs flask_app  # Get logs from the Flask container

      # Step 6: Send a GET request to /api/items and check if the response is 200 OK
      - name: Test /api/items endpoint
        run: |
          response=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:5001/api/items)
          if [ "$response" -eq 200 ]; then
            echo "GET /api/items succeeded with status 200"
          else
            echo "GET /api/items failed with status $response"
            exit 1  # Fail the workflow if status code is not 200
          fi
      
